@startuml class_diagram

package IAR {

    interface Workbench {
        +readonly name: string
        +readonly version: string
        +readonly path: fs.PathLike
        +readonly platforms: ReadonlyArray<IarPlatform>
        
        +collectWorkbenchesFrom(root: Fs.PathLike): Workbenches[]
        +create(root: Fs.PathLike): Workbench | undefined
        +isValid(workbenchPath: Fs.PathLike): boolean

        +mergeUnique(...workbenches: Workbench[][]): Workbench[]
    }

    class IarWorkbench {

        +{static} findInstallations(root: fs.PathLike): IarWorkbench[]
    }

    interface Platform {
        +readonly path: string
        +readonly compilers: Compiler[]

        +collectPlatformsFrom(root: Fs.PathLike, ignoreFolders: string[]): Platform[]
        +create(path: Fs.PathLike): Platform | undefined

        +mergeUnique(...platforms: Platform[][]): Platform[]
    }

    class IarPlatform {
    }

    interface Compiler {
        +readonly version: string
        +readonly path: Fs.PathLike
        +readonly defines: ReadonlyArray<Define>
        +readonly includePaths: ReadonlyArray<string>

        +collectCompilersFrom(root: Fs.PathLike): Compiler[]
        +create(path: Fs.PathLike): Compiler | undefined
        +mergeUnique(...lists: Compiler[][]): Compiler[]
    }

    class IarCompiler {
    }

    interface Project {
        +readonly path: Fs.PathLike
        +readonly configurations: ReadonlyArray<Config>
        +readonly name: string

        +reload(): any
        +findConfiguration(name: string): Config | undefined

        +createProjectFrom(ewpPath: Fs.PathLike): Project | undefined
        +createProjectsFrom(directory: Fs.PathLike, recursive: boolean = true): Project[]
    }

    class EwpFile {
    }

    interface Config {
        readonly name: string
        readonly defines: Define[]
        readonly includes: IncludePath[]
        readonly preIncludes: PreIncludePath[]

        fromXml(projectXml: XmlNode, ewpPath: Fs.PathLike): Config[]
    }

    class XmlConfig {
        -readonly xmlNode: XmlNode
    }

    Interface Define {
        readonly identifier: string
        readonly value: string | undefined

        +fromXmlNode(xml: XmlNode): Define[]
        +fromSourceFile(path: Fs.PathLike): Define[]
        +fromSourceData(buf: Buffer): Define[]
        +fromSourceContent(content: string): Define[]
    }

    class XmlDefine {
        -readonly xmlNode: XmlNode
    }

    class StringDefine {
        -readonly identifier_: string
        -readonly value_: string
    }

    Interface IncludePath {
        +readonly path: Fs.PathLike
        +readonly absolutePath: Fs.PathLike
        +readonly workspacePath: Fs.PathLike

        +fromXmlData(xml: XmlNode, projectPath: Fs.PathLike): IncludePath[]
        +fromCompilerOutput(output: string): IncludePath[]
    }

    class XmlIncludePath {
        -xmlNode: XmlNode
    }

    class StringIncludePath {
    }

    Interface PreInclude {
        +readonly path: Fs.PathLike
        +readonly absolutePath: Fs.PathLike
        +readonly workspaceRelativePath: Fs.PathLike

        +fromXml(xml: XmlNode, projectPath: Fs.PathLike): PreIncludePath[]
    }

    class XmlPreInclude {
        -readonly xmlNode: XmlNode
    }
}

package Extension {
    package UI {
        interface ListInput<T> {
            +show(): boolean
            +selected(): T | undefined

            +createListInput(model: ListInputModel<T>): ListInput<T>
        }

        interface ListInputModel<T> {
            +readonly amount: number
            +readonly selected: T | undefined

            +addOnSelectedHandler(fn: (model: ListInputModel<T>, selected: T), this: any)
            +addOnDataChangedHandler(fn: (model: ListInputModel<T>, changedItem: T, this: any))
            
            +label(index: number): string
            +description(index: number): string | undefined
            +detail(index: number): string | undefined

            +select(index: number): boolean
        }
    }

    package Command {
        interface Command {
            +execute(): void;
            +register(context: ExtensionContext): void;
        }

        enum Commands {
            SelectWorkbench
            SelectPlatform
            SelectCompiler
            SelectProject
            SelectConfiguration
        }

        interface CommandManager {
            +getCommand(cmd: Commands): Command | undefined;
            +setCommand(cmd: Commands, command: Command): void;

            +{static} getInstance(): CommandManager;
            +{static} generateCommands(): void;
        }
    }

    class XmlNode {
        -element: xmljs.Element
        +readonly tagName: string
        +readonly text: string | undefined

        +getChildrenByType(type: string): XmlNode[]
        +getChildrenByName(name: string): XmlNode[]
    }

    interface CppToolsConfigGenerator {
        +generate(config: Config, compiler: Compiler): void;
    }
}

Workbench <|. IarWorkbench
Platform <|. IarPlatform
Compiler <|. IarCompiler

Workbench "1" *-- "1+" Platform
Platform "1" *-- "1+" Compiler

EwpFile .|> Project
XmlConfig .|> Config

Define <|.. XmlDefine
Define <|.. StringDefine

IncludePath <|.. XmlIncludePath
IncludePath <|.. StringIncludePath

PreInclude <|.. XmlPreInclude

Project "1" *-- "1+" Config

Config "1" *-- "*" Define
Config "1" *-- "*" IncludePath
Config "1" *-- "*" PreInclude

Compiler "1" *-- "*" Define
Compiler "1" *-- "*" IncludePath

@enduml